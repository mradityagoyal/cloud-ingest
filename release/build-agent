#!/bin/bash
set -e
source $(dirname ${BASH_SOURCE[0]})/release-helpers.sh

# This script does the heavy lifting for the preliminary agent release process.
#
# How to invoke: build-agent <full-commit-id>
#
# What it does:
# - Clone the git repo into a temp working directory, at the specified commit
# - Run unit tests
# - Build for every supported os/architecture combination
# - Upload a new version to our version archive bucket
#
# The "clone a commit-id from repo" requirement ensures we never mistakenly
# release local changes.

function upload_artifacts() {
  local release_version=$1
  local gcs_prefix=$2
  local asset_dir=$3

  # Upload our artifacts to the new release version.
  echo "Uploading Artifacts..."
  echo ""
  gsutil -m cp $asset_dir/* $gcs_prefix/
  echo ""

  # Set the value of AgentVersion metadata field for agent binary.
  echo "Setting AgentVersion metadata field to $release_version"
  echo ""
  gsutil setmeta -h "x-goog-meta-AgentVersion:$release_version" $gcs_prefix/*.tar.gz
  echo ""

  # Set Cache-Control to private to prevent agent update script from downloading
  # stale agent tarball.
  echo "Setting Cache-Control metadata field to private..."
  echo ""
  gsutil setmeta -h "Cache-Control:private" $gcs_prefix/*.tar.gz
  echo ""
}

function build_release_assets() {
  local release_version=$1
  local asset_dir=$2
  local artifact_dir=$3

  ldflags="-X main.buildVersion=$release_version -X main.buildCommit=$GIT_COMMIT_ID -X main.buildDate=$build_date"
  # Build for every OS/Arch combination we support.
  echo""
  echo "Building release assets..."
  for os_arch in ${BUILD_PLATFORMS[@]}; do
    build_os=$(echo $os_arch | cut -f1 -d_)
    build_arch=$(echo $os_arch | cut -f2 -d_)
    echo "Building for $build_os/$build_arch..."
    mkdir -p $artifact_dir/$os_arch

    # Bundle the license.
    cp $SOURCE_DIR/LICENSE $artifact_dir/$os_arch

    if [[ $build_os == "windows" ]]; then
      GOOS=$build_os GOARCH=$build_arch go build -gcflags "$gcflags" -asmflags "$asmflags" -ldflags "$ldflags" -o $artifact_dir/$os_arch/$BINARY_NAME.exe $MAIN_SOURCE
      chmod 755 $artifact_dir/$os_arch/$BINARY_NAME.exe
      pushd $artifact_dir/$os_arch > /dev/null
      zip -r -q $asset_dir/$BINARY_NAME-$os_arch.zip *
      popd > /dev/null
    else
      GOOS=$build_os GOARCH=$build_arch go build -gcflags "$gcflags" -asmflags "$asmflags" -ldflags "$ldflags" -o $artifact_dir/$os_arch/$BINARY_NAME $MAIN_SOURCE
      chmod 755 $artifact_dir/$os_arch/$BINARY_NAME
      tar -czf $asset_dir/$BINARY_NAME-$os_arch.tar.gz -C $artifact_dir/$os_arch $BINARY_NAME LICENSE
    fi
  done

  echo "Done building."
  echo ""
}

# Basic command line dependencies needed to run this script.
command -v git > /dev/null 2>&1 || die "git is not installed. Bailing!"
command -v go > /dev/null 2>&1 || die "go is not installed. Bailing!"
command -v gsutil > /dev/null 2>&1 || die "gsutil is not installed. Bailing!"

# Add supported platforms here, as they're needed. These are cross-compiled by
# Go without having to be built on the local platform. Neat!
#
# For the full supported grid, see:
# https://gist.github.com/asukakenji/f15ba7e588ac42795f421b48b8aede63
#
# e.g. To add Windows, add 'windows_amd64' to this list.
BUILD_PLATFORMS=(linux_amd64)
ALL_ENVS=("TEMP" "PROD")
ENVS_REGEX=$(IFS='|';echo "^(${ALL_ENVS[*]})$";)

# Check for flags
while [[ ! $# -eq 0 ]]
do
	case "$1" in
    --git_commit_id | -g)
      [[ ! -z $2 ]] || die "INVALID ARGUMENT: Git commit flag with no corresponding id. Expected: ${GIT_COMMIT_REGEX}."
      GIT_COMMIT_ID=$2
      shift # Shift the flag
      shift # Shift the commit id
      ;;
    --release_version | -r)
      [[ ! -z $2 ]] || die "INVALID ARGUMENT: Release version flag with no corresponding version #. Expected ${VERSION_REGEX}"
      RELEASE_VERSION=$2
      shift # Shift the flag
      shift # Shift the commit id
      ;;
    --deploy_to_envs | -e)
      [[ ! -z $2 ]] || die "INVALID ARGUMENT: Deploy to flag with no corresponding environments. Expected comma separated list with possible vals: ${ALL_ENVS[@]}"
      IFS=', ' read -r -a DEPLOY_TO_ENVS <<< $2
      shift # Shift the flag
      shift # Shift the commit id
      ;;
  *) die "INVALID ARGUMENT: ${1} is not a recognized Flag."
	esac
done

GIT_REPO_NAME=GoogleCloudPlatform/cloud-ingest

# Local directories of relevance.
SOURCE_DIR=$(go env GOPATH)/src/github.com/$GIT_REPO_NAME
RELEASE_DIR=$SOURCE_DIR/release
WORKING_DIR=$RELEASE_DIR/tmp-release-ephemeral
REPO_DIR=$WORKING_DIR/go/src/github.com/GoogleCloudPlatform/cloud-ingest/
ARTIFACT_DIR=$WORKING_DIR/build_artifacts
ASSET_DIR=$WORKING_DIR/assets
VERSION_FILE=$ASSET_DIR/VERSIONINFO.txt

# Binary info.
MAIN_SOURCE=agent/agent.go
BINARY_NAME=agent

# Validate input and state.
[[ -d $RELEASE_DIR ]] || die "Directory $RELEASE_DIR does not exist."

# Read a new release version or get one from the changelog.
if [[ -z $RELEASE_VERSION ]]; then
  RELEASE_VERSION=$(go run $RELEASE_DIR/newest/getnewestversion.go)
  echo "Calculating release version automatically via the changelog. Chose ${RELEASE_VERSION}."
fi
[[ $RELEASE_VERSION =~ $VERSION_REGEX ]] || die "Agent release version \"${RELEASE_VERSION}\" does not match version regex: ${VERSION_REGEX}."
[[ ! $all_releases =~ "/$RELEASE_VERSION/" ]] || die "Version $RELEASE_VERSION already exists."

# Read a commit id or get the last change to the changelog that added [$VERSION]
if [[ -z $GIT_COMMIT_ID ]]; then
  echo "Automated build with no explicit commit id, using last commit to changelog that updated version."
  GIT_COMMIT_ID=$(git log -1 -S"[${RELEASE_VERSION:1}]" ${SOURCE_DIR}/CHANGELOG.md | grep -E "^commit ${GIT_COMMIT_REGEX}" | grep -E -o $GIT_COMMIT_REGEX)
  echo "Last commit id is ${GIT_COMMIT_ID}"
fi
[[ ! -z $GIT_COMMIT_ID ]] || die "Git commit id was not passed in or found from changelog."
[[ $GIT_COMMIT_ID =~ $GIT_COMMIT_REGEX ]] || die "Git commit ID \"${GIT_COMMIT_ID}\" does not match git commit regex: ${GIT_COMMIT_REGEX}."

# Get environments to deploy or use default
if [[ -z $DEPLOY_TO_ENVS ]];then
	DEPLOY_TO_ENVS=("TEMP")
fi
for env in ${DEPLOY_TO_ENVS[@]}; do
	[[ $env =~ $ENVS_REGEX ]] || die "Environment val ${env} does not match regex: ${ENVS_REGEX}."
done

# Clean up any old release work, and start fresh.
rm -rf $WORKING_DIR
mkdir -p $REPO_DIR
pushd $REPO_DIR > /dev/null

# Grab code to release (repo@commit).
echo "Retrieving code to release..."
git clone https://github.com/$GIT_REPO_NAME.git .
git checkout $GIT_COMMIT_ID
echo "Done retrieving code."
echo ""

# Set a temporary go path, so we look for dependencies in the right place.
GOPATH=$WORKING_DIR/go
echo "Pulling dependencies and doing full local build and test..."
make setup-agent build-agent
echo "Done validating the build."

# Run tests - Never allow releases that fail unit tests.
echo "Running unit tests..."
go test ./... || die "\nUnit tests are failing. Not allowing release to proceed."
echo "Done running tests."
echo ""


# Additional flags to pass to the compiler. Currently just release information
# to compile in.
build_date=$(date -u +%Y-%m-%dT%H:%M:%S%Z)

# Trim the path up to GOPATH, so the dev environment path isn't visible in stack
# traces. We have to do GOPATH and not REPO_DIR here, to ensure that a stack
# trace originating in a dependency won't break out of the trim and show the
# full path again.
gcflags="-trimpath=$GOPATH"
asmflags="-trimpath=$GOPATH"

# Create an asset directory, and write a basic text file with our version info.
# This is for human convenience; this file will not be parsed programmatically.
mkdir -p $ASSET_DIR
echo "Version: $RELEASE_VERSION" > $VERSION_FILE
echo "Commit: $GIT_COMMIT_ID" >> $VERSION_FILE
echo "Build Date: $build_date" >> $VERSION_FILE

# Create a separate asset directory to store the next version of agent used in
# testing.
mkdir -p $ASSET_DIR-next
cp $VERSION_FILE $ASSET_DIR-next
git
build_release_assets $RELEASE_VERSION $ASSET_DIR $ARTIFACT_DIR
build_release_assets $RELEASE_VERSION+next-version $ASSET_DIR-next $ARTIFACT_DIR-next

# Prefixes of GCS buckets that agent will be uploaded to.
for env in ${DEPLOY_TO_ENVS[@]}; do
	case $env in
		"TEMP")
			upload_artifacts $RELEASE_VERSION $GCS_STAGING_PREFIX $ASSET_DIR
			;;
		"PROD")
			echo "UPLOADED TO PROD, doo doo doo."
#			PROD_AGENT_UPLOAD_PREFIXES=($GCS_VERSIONS_PREFIX/$release_version $GCS_CANARY_PREFIX/prod)
#			NEXT_AGENT_UPLOAD_PREFIXES=($GCS_CANARY_PREFIX/next)
			# Upload our artifacts to GCS and set the AgentVersion metadata fields for agent
			# binary.
#			for gcs_prefix in ${PROD_AGENT_UPLOAD_PREFIXES[@]}; do
#				upload_artifacts $RELEASE_VERSION $gcs_prefix $ASSET_DIR
#			done
#
#			for gcs_prefix in ${NEXT_AGENT_UPLOAD_PREFIXES[@]}; do
#				upload_artifacts $RELEASE_VERSION+next-version $gcs_prefix $ASSET_DIR-next
#			done
			;;
		*)
			die "No environments specified, nothing is upload to GCS."
			;;
	esac
done
echo "Done!"

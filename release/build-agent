#!/bin/bash
set -e
source $(dirname ${BASH_SOURCE[0]})/release-helpers.sh

# This script does the heavy lifting for the preliminary agent release process.
#
# How to invoke: build-agent <full-commit-id>
#
# What it does:
# - Clone the git repo into a temp working directory, at the specified commit
# - Run unit tests
# - Build for every supported os/architecture combination
# - Upload a new version to our version archive bucket
#
# The "clone a commit-id from repo" requirement ensures we never mistakenly
# release local changes.

function upload_artifacts() {
  local asset_dir=$1
  local release_version=$2
  local gcs_prefix=$3
  local metadata_version=$4

  # Upload our artifacts to the new release version.
  echo "Uploading Artifacts..."
  echo ""
  gsutil -m cp $asset_dir/* $gcs_prefix/$release_version/
  echo ""

  # Set the value of AgentVersion metadata field for agent binary.
  echo "Setting AgentVersion metadata field to $metadata_version"
  echo ""
  gsutil setmeta -h "x-goog-meta-AgentVersion:$metadata_version" $gcs_prefix/$release_version/*.tar.gz
  echo ""
}

# Basic command line dependencies needed to run this script.
command -v git > /dev/null 2>&1 || die "git is not installed. Bailing!"
command -v go > /dev/null 2>&1 || die "go is not installed. Bailing!"
command -v gsutil > /dev/null 2>&1 || die "gsutil is not installed. Bailing!"

# Add supported platforms here, as they're needed. These are cross-compiled by
# Go without having to be built on the local platform. Neat!
#
# For the full supported grid, see:
# https://gist.github.com/asukakenji/f15ba7e588ac42795f421b48b8aede63
#
# e.g. To add Windows, add 'windows_amd64' to this list.
BUILD_PLATFORMS=(linux_amd64)

# Git repo stuff.
GIT_COMMIT_ID=$1
GIT_REPO_NAME=GoogleCloudPlatform/cloud-ingest

# Local directories of relevance.
SOURCE_DIR=$(go env GOPATH)/src/github.com/$GIT_REPO_NAME
RELEASE_DIR=$SOURCE_DIR/release
WORKING_DIR=$RELEASE_DIR/tmp-release-ephemeral
REPO_DIR=$WORKING_DIR/go/src/github.com/GoogleCloudPlatform/cloud-ingest/
ARTIFACT_DIR=$WORKING_DIR/build_artifacts
ASSET_DIR=$WORKING_DIR/assets
VERSION_FILE=$ASSET_DIR/VERSIONINFO.txt

# Binary info.
MAIN_SOURCE=agent/agent.go
BINARY_NAME=agent

# Validate input and state.
[[ -d $RELEASE_DIR ]] || die "Directory $RELEASE_DIR does not exist."
[[ $GIT_COMMIT_ID =~ ^[0-9a-f]{40}$ ]] || die "First argument should be git commit ID."

# Clean up any old release work, and start fresh.
rm -rf $WORKING_DIR
mkdir -p $REPO_DIR
pushd $REPO_DIR > /dev/null

# Grab code to release (repo@commit).
echo "Retrieving code to release..."
git clone git@github.com:$GIT_REPO_NAME.git .
git checkout $GIT_COMMIT_ID
echo "Done retrieving code."
echo ""

# Set a temporary go path, so we look for dependencies in the right place.
GOPATH=$WORKING_DIR/go
echo "Pulling dependencies and doing full local build and test..."
make setup-agent build-agent
echo "Done validating the build."

# Run tests - Never allow releases that fail unit tests.
echo "Running unit tests..."
go test ./... || die "\nUnit tests are failing. Not allowing release to proceed."
echo "Done running tests."
echo ""

# Display existing releases.
echo "Existing Releases (for reference):"
echo ""
all_releases=$(gsutil ls $GCS_VERSIONS_PREFIX/)
echo "$all_releases"
echo""

# Read a new release version, and verify it is unique.
release_version=$(prompt_with_regex "Enter new version number (must be of format v1.0.0, and not yet in use)" "$VERSION_REGEX")
[[ ! $all_releases =~ "/$release_version/" ]] || die "Version $release_version already exists."

# Additional flags to pass to the compiler. Currently just release information
# to compile in.
build_date=$(date -u +%Y-%m-%dT%H:%M:%S%Z)
ldflags="-X main.buildVersion=$release_version -X main.buildCommit=$GIT_COMMIT_ID -X main.buildDate=$build_date"

# Trim the path up to GOPATH, so the dev environment path isn't visible in stack
# traces. We have to do GOPATH and not REPO_DIR here, to ensure that a stack
# trace originating in a dependency won't break out of the trim and show the
# full path again.
gcflags="-trimpath=$GOPATH"
asmflags="-trimpath=$GOPATH"

# Create an asset directory, and write a basic text file with our version info.
# This is for human convenience; this file will not be parsed programmatically.
mkdir -p $ASSET_DIR
echo "Version: $release_version" > $VERSION_FILE
echo "Commit: $GIT_COMMIT_ID" >> $VERSION_FILE
echo "Build Date: $build_date" >> $VERSION_FILE

# Build for every OS/Arch combination we support.
echo""
echo "Building release assets..."
for os_arch in ${BUILD_PLATFORMS[@]}; do
  build_os=$(echo $os_arch | cut -f1 -d_)
  build_arch=$(echo $os_arch | cut -f2 -d_)
  echo "Building for $build_os/$build_arch..."
  mkdir -p $ARTIFACT_DIR/$os_arch

  # Bundle the license.
  cp $REPO_DIR/LICENSE $ARTIFACT_DIR/$os_arch

  if [[ $build_os == "windows" ]]; then
    GOOS=$build_os GOARCH=$build_arch go build -gcflags "$gcflags" -asmflags "$asmflags" -ldflags "$ldflags" -o $ARTIFACT_DIR/$os_arch/$BINARY_NAME.exe $MAIN_SOURCE
    pushd $ARTIFACT_DIR/$os_arch > /dev/null
    zip -r -q $ASSET_DIR/$BINARY_NAME-$os_arch.zip *
    popd > /dev/null
  else
    GOOS=$build_os GOARCH=$build_arch go build -gcflags "$gcflags" -asmflags "$asmflags" -ldflags "$ldflags" -o $ARTIFACT_DIR/$os_arch/$BINARY_NAME $MAIN_SOURCE
    tar -czf $ASSET_DIR/$BINARY_NAME-$os_arch.tar.gz -C $ARTIFACT_DIR/$os_arch $BINARY_NAME LICENSE
  fi
done
popd > /dev/null

echo "Done building."
echo ""

# Upload our artifacts to the new release version and set the AgentVersion
# metadata fields for agent binary.
upload_artifacts $ASSET_DIR $release_version $GCS_VERSIONS_PREFIX $release_version

# Upload the same artifacts to the canary release bucket and set the
# AgentVersion metadata fields for agent binary.
upload_artifacts $ASSET_DIR $release_version $GCS_CANARY_VERSIONS_PREFIX "$release_version+next-version"

echo "Done!"

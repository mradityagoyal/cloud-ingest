syntax = "proto3";

package cloud_ingest_task;

option go_package = "github.com/GoogleCloudPlatform/cloud-ingest/proto/task_go_proto";

import "google/protobuf/timestamp.proto";
import "listfile.proto";
import "pulse.proto";

// Specifies the task operation that a task performs.
enum Type {
  UNSET_TYPE = 0;               // Unknown task type.
  LIST = 1;                     // Lists the files in an on-prem dir.
  PROCESS_LIST = 2;             // Processes the list task output.
  COPY = 3;                     // Upload a file from on-prem to GCS.
  COPY_BUNDLE = 4;              // Upload a bundle of files from on-prem to GCS.
  PROCESS_UNEXPLORED_DIRS = 5;  // Process unexplored dirs output by list tasks.
  DELETE_BUNDLE = 6;            // Delete a bundle of objects in GCS;
  PROCESS_DELETE_DIRS = 7;      // Delete a list of "directories" in GCS.
  LIST_GCS = 8;                 // Lists the objects in a GCS bucket+prefix.
  DOWNLOAD_BUNDLE = 9;          // Download a bundle of GCS objects to on-prem.
}

// Specifies the current status of the cloud ingest task.
enum Status {
  UNSET_STATUS = 0;  // TaskStatus is unspecified.
  READY = 1;         // The task is ready to be performed.
  FAILED = 2;        // The task was completed but failed.
  SUCCESS = 3;       // The task was completed and succeeded.
}

// Specifies the classes of failures that a task can have.
enum FailureType {
  UNSET_FAILURE_TYPE = 0;           // Not used.
  UNKNOWN_FAILURE = 1;              // The failure type is not known.
  FILE_MODIFIED_FAILURE = 2;        // The file was modified during upload.
  HASH_MISMATCH_FAILURE = 3;        // Source hash doesn't match GCS hash.
  PRECONDITION_FAILURE = 4;         // Upload failed: GCS precondition failure.
  FILE_NOT_FOUND_FAILURE = 5;       // Source file for upload non-existent.
  PERMISSION_FAILURE = 6;           // Agent lacks permission for action.
  SERVICE_PERMISSION_FAILURE = 15;  // Service lacks permission for action.
  NOT_ACTIVE_JOBRUN = 7;            // The task job run is not active.

  // The agent does not support the task's Job Run Version.
  AGENT_UNSUPPORTED_VERSION = 8;

  // The service does not support the task's Job Run Version.
  SERVICE_UNSUPPORTED_VERSION = 9;

  // The task type does not support the task's Job Run Version.
  TASK_TYPE_UNSUPPORTED_VERSION = 17;

  // The task was completed by an agent with a blacklisted agent version.
  BLACKLISTED_AGENT_VERSION = 10;

  // The agent processing this task could not find the source directory.
  SOURCE_DIR_NOT_FOUND = 11;

  // The name of the file is invalid.
  INVALID_FILE_NAME = 12;

  // The agent processing a copybundle task and all bundle files fail with not
  // service-induced error.
  NOT_SERVICE_INDUCED_UNKNOWN_FAILURE = 13;

  // The destination bucket is not found.
  BUCKET_NOT_FOUND = 14;

  // Failed to find a service metadata file (list file or unexplored dirs file).
  METADATA_OBJECT_NOT_FOUND_FAILURE = 16;

  // GCS returned a HTTP 410 "Gone" for a given resuamble ID.
  GCS_RESUMABLE_ID_GONE_FAILURE = 18;
}

// Contains information about a task. A task is a unit of work, one of:
// 1) listing the contents of a single directory
// 2) processing a list file
// 3) copying a single file
// 4) copying a bundle of files
// 5) processing a list of unexplored directories
// 6) deleting a bundle of objects.
// 7) processing a list of "directories" and generating delete bundle tasks
//    for children of those "directories".
// 8) listing the contents of a GCS bucket
// 9) downloading a bundle of objects
// Tasks might be incremental and require multiple request-response round trips
// to complete.
message Spec {
  oneof spec {
    ListSpec list_spec = 1;
    ProcessListSpec process_list_spec = 2;
    CopySpec copy_spec = 3;
    CopyBundleSpec copy_bundle_spec = 4;
    ProcessUnexploredDirsSpec process_unexplored_dirs_spec = 5;
    DeleteBundleSpec delete_bundle_spec = 6;
    ProcessDeleteDirsSpec process_delete_dirs_spec = 7;
    ListGCSSpec list_gcs_spec = 9;
    DownloadBundleSpec download_bundle_spec = 10;
  }
  int64 issuance_number = 8;
}

// Contains the information about a list task. A list task is responsible for
// listing the contents of a directory.
message ListSpec {
  string dst_list_result_bucket = 1;  // GCS bucket for this list file.
  string dst_list_result_object = 2;  // GCS object for this list file.

  // GCS object for the list of unexplored directories (directories
  // that were discovered but not yet listed).
  string dst_unexplored_dirs_object = 5;

  // On-Premises directories to list.
  repeated string src_directories = 3;

  // Expected GCS generation number for dst_list_result_object. Used for
  // Job Run Version 2 and below.
  int64 expected_generation_num = 4;

  // Expected GCS generation number for dst_list_result_object. Used for
  // Job Run Version 3 and above.
  int64 list_result_expected_generation_num = 7;

  // Expected GCS generation number for dst_unexplored_dirs_object.
  int64 unexplored_dirs_expected_generation_num = 6;

  // The root directory specified in the JobConfig.
  string root_directory = 8;
}

// Contains the information about a list GCS task. A list GCS task is
// responsible for listing the contents of a GCS bucket+prefixes.
message ListGCSSpec {
  string dst_list_result_bucket = 1;  // GCS bucket for this list file.
  string dst_list_result_object = 2;  // GCS object for this list file.

  // The root GCS bucket specified in the JobConfig.
  string gcs_src_bucket = 3;

  // GCS bucket paths (prefixes) to list.
  repeated string src_paths = 4;

  // Expected GCS generation number for dst_list_result_object. Used for
  // Job Run Version 3 and above.
  int64 list_result_expected_generation_num = 5;
}

// Contains the information about a process list task. A process list task is
// responsible for processing the list file produced by a list task.
message ProcessListSpec {
  string dst_list_result_bucket = 1;  // GCS bucket for this list file.
  string dst_list_result_object = 2;  // GCS object for this list file.
  string src_directory = 3;           // On-Premises dir for this list file.

  int64 byte_offset = 4;  // List file bytes processed so far.
  // The last directory header read from the list file.
  cloud_ingest_listfile.DirectoryHeader last_read_header = 5;

  bool gcs_all_items_processed = 7;  // Whether the prefix is fully processed.
  string gcs_next_item = 8;          // The name of the next GCS item.
  string gcs_cont_token = 9;         // Continuation token for the GCS call.
  bool gcs_next_item_is_an_object =
      10;  // When true the next item is an object otherwise it is a prefix.

  reserved 6;  // Don't reuse.
}

// Contains the information about a process unlisted dirs task. A process
// unlisted dirs task is responsible for processing the unexplored dirs file
// produced by a list task.
message ProcessUnexploredDirsSpec {
  // GCS bucket for list task output.
  string dst_list_result_bucket = 1;

  // GCS object for the unexplored dirs file.
  string dst_unexplored_dirs_object = 2;

  // Unexplored dirs file bytes processed so far.
  int64 byte_offset = 3;
}

// Contains the information about a copy task. A copy task is responsible for
// copying a single file.
message CopySpec {
  string src_file = 1;                // The On-Premises source file.
  string dst_bucket = 2;              // The GCS destination bucket.
  string dst_object = 3;              // The GCS destination object.
  int64 expected_generation_num = 4;  // The expected GCS generation number.

  // Fields only for managing resumable copies.
  int64 file_bytes = 6;             // The file size, in bytes.
  int64 file_m_time = 7;            // The file modified time (Unix).
  int64 bytes_copied = 8;           // The count of bytes copied so far.
  uint32 crc32c = 9;                // The CRC32C of the bytes copied so far.
  string resumable_upload_id = 11;  // The resumable upload ID.

  reserved 10;
}

// Contains the information about a download task. A download task is
// responsible for copying a single file.
message DownloadSpec {
  string src_object = 1;     // The GCS source object.
  string src_bucket = 2;     // The GCS source bucket.
  string dst_file = 3;       // The on-premises destination file.
  int64 generation_num = 4;  // The expected file "generation" suffix.
  int64 file_bytes = 5;      // The source object size, in bytes.
  int64 bytes_copied = 6;    // The count of bytes copied so far.
}

// Contains the information for a single file within a Copy Bundle task.
message BundledFile {
  CopySpec copy_spec = 1;
  Status status = 2;
  FailureType failure_type = 3;
  string failure_message = 4;
  // The copy_log should be populated by the Agent in the resp_spec within the
  // TaskRespMsg. The DCP should clear this field before persisting this spec to
  // Spanner.
  CopyLog copy_log = 5;
}

// Contains the information about a Copy Bundle task. A Copy Bundle task is
// responsible for copying multiple files to GCS.
message CopyBundleSpec {
  repeated BundledFile bundled_files = 1;
}

message BundledDownload {
  DownloadSpec spec = 1;
  Status status = 2;
  FailureType failure_type = 3;
  string failure_message = 4;
  CopyLog log = 5;
}

message DownloadBundleSpec {
  repeated BundledDownload bundled_objects = 1;
}

// Contains the information to delete a GCS object.
message DeleteObjectSpec {
  string dst_bucket = 1;       // The GCS destination bucket.
  string dst_object = 2;       // The GCS destination object.
  int64 generation_num = 3;    // The GCS generation number of existing object.
  int64 dst_object_bytes = 4;  // Size of the GCS object.
}

// Contains the information for a single object within a Delete Bundle task.
message BundledObject {
  DeleteObjectSpec delete_object_spec = 1;
  Status status = 2;
  FailureType failure_type = 3;
  string failure_message = 4;
  BundledObjectLog bundled_object_log = 5;
}

// Contains the information about a Delete Bundle task. A Delete Bundle
// task is responsible for deleting multiple objects in GCS.
message DeleteBundleSpec {
  repeated BundledObject bundled_objects = 1;
}

// Contains the information about a Process Delete Dirs task. A Process Delete
// Dirs task is responsible for generating delete bundle tasks for
// children of deleted directories. Deleting a directory results in
// deleting all objects in GCS with a shared prefix.
message ProcessDeleteDirsSpec {
  string dst_bucket = 1;              // The GCS destination bucket.
  repeated string prefix = 2;         // GCS object prefixes.
  int64 prefix_index = 3;             // Index to the prefix to be processed.
  string continuation_token = 4;      // Token to resume listing.
  string next_object_to_process = 5;  // Name of the next object to process.
}

// Contains ReadyTasks Spanner Queue message payload.
message ReadyTaskMsg {
  string project_id = 1;
  string job_config_id = 2;
  string job_run_id = 3;
  string task_id = 4;
  Spec spec = 5;
}

// Contains the message sent from the DCP to an Agent to issue a task request.
message TaskReqMsg {
  string task_rel_rsrc_name = 1;
  string jobrun_rel_rsrc_name = 3;
  string job_run_version = 4;
  Spec spec = 2;
}

// Contains the message sent from the Agent to the DCP in response to a task
// request. Note that in the case where the Task is a CopyBundle, these top
// level fields apply to the entire CopyBundle. For info about the individual
// files, examine the CopyBundleSpec within the resp_spec.
message TaskRespMsg {
  string task_rel_rsrc_name = 1;
  string job_run_version = 8;
  string agent_version = 9;
  string status = 2;  // TODO(b/79153431): Make this an enum.
  FailureType failure_type = 3;
  string failure_message = 4;
  Log log = 5;
  Spec req_spec = 6;
  Spec resp_spec = 7;
  // Pub/Sub request message publish time.
  google.protobuf.Timestamp req_publish_time = 10;
  // Agent-measured start of request processing.
  google.protobuf.Timestamp req_start_time = 11;
  // Agent-measured Pub/Sub response publish time.
  google.protobuf.Timestamp resp_publish_time = 12;
  cloud_ingest_pulse.AgentId agent_id = 13;
}

// Contains the payload of a message in the "dispatch" queue, a message ready
// for preparation and delivery to pubsub.
message DispatchPayload {
  // Topic to which this message should be sent according to the task type.
  string topic_id = 1;
  // Contains the type of task serialized in the message data.
  Type task_type = 2;
  // Contains the already serialized pubsub message (according to task type,
  // job run version, etc).
  bytes msg_data = 3;
}

// Contains log information for a task. This message is suitable for the "Log"
// field in the LogEntries Spanner queue. Note that this info is eventually
// dumped into the user's GCS bucket.
message Log {
  oneof log {
    ListLog list_log = 1;
    ProcessListLog process_list_log = 2;
    CopyLog copy_log = 3;
    CopyBundleLog copy_bundle_log = 4;
    ProcessUnexploredDirsLog process_unexplored_dirs_log = 5;
    DeleteBundleLog delete_bundle_log = 6;
    ProcessDeleteDirsLog process_delete_dirs_log = 7;
  }
}

// Contains log fields for a List task.
message ListLog {
  int64 files_found = 1;
  int64 bytes_found = 2;
  // This is a count of directories that were discovered by this list task that
  // were not previously discovered by any other list task.
  int64 dirs_found = 3;
  // This is a count of the number of directories that were listed by this list
  // task.
  int64 dirs_listed = 4;
  // This is a count of directories that were either
  // a) discovered by this list task
  // or
  // b) included in the list spec's src_directories list
  // AND were not listed as part of this list task.
  int64 dirs_not_listed = 5;
  // A list of directories that were included in the list spec's
  // src_directories field but were not found on-prem.
  repeated string dirs_not_found = 6;
}

// Contains log fields for a ProcessList task.
message ProcessListLog {
  int64 entries_processed = 1;
  int64 starting_offset = 2;
  int64 ending_offset = 3;
  int64 files_skipped = 4;  // Files already up to date in GCS.
  int64 bytes_skipped = 5;  // Bytes already up to date in GCS.
  int64 objects_found_unique_to_sink = 6;
  int64 bytes_found_unique_to_sink = 7;
  int64 files_to_upload = 8;  // Files to be uploaded to GCS.
  int64 bytes_to_upload = 9;  // Bytes to be uploaded to GCS.
}

// Contains log fields for a ProcessUnexploredDirs task.
message ProcessUnexploredDirsLog {
  int64 entries_processed = 1;
  int64 starting_offset = 2;
  int64 ending_offset = 3;
}

// Contains log fields for a Copy task.
message CopyLog {
  string src_file = 1;
  int64 src_bytes = 2;
  int64 src_m_time = 3;  // Unix.
  uint32 src_crc32c = 4;

  string dst_file = 5;
  int64 dst_bytes = 6;
  int64 dst_m_time = 7;  // Unix.
  uint32 dst_crc32c = 8;
  string dst_md5 = 10;

  int64 bytes_copied = 9;
}

message BundledFileLog {
  Status status = 1;
  FailureType failure_type = 2;
  string failure_message = 3;
  CopyLog copy_log = 4;
}

// Contains log fields for a CopyBundle task.
message CopyBundleLog {
  int64 files_copied = 1;
  int64 bytes_copied = 2;

  int64 files_failed = 3;
  int64 bytes_failed = 4;

  repeated BundledFileLog bundled_files_logs = 5;
}

message BundledObjectLog {
  Status status = 1;
  FailureType failure_type = 2;
  string failure_message = 3;
  string dst_bucket = 6;
  string dst_object = 4;
  int64 dst_object_bytes = 5;
}

// Contains log fields for a DeleteBundle task.
message DeleteBundleLog {
  int64 objects_deleted = 1;
  int64 bytes_deleted = 2;

  int64 objects_failed = 3;
  int64 bytes_failed = 4;

  repeated BundledObjectLog bundled_objects_logs = 5;
}

// Contains log fields for a ProcessDeleteDirs task.
message ProcessDeleteDirsLog {
  int64 prefixes_processed = 1;
  int64 objects_found_unique_to_sink = 2;
  int64 bytes_found_unique_to_sink = 3;
}

// Contains log entry information for a task. This message is suitable for
// the LogEntries Spanner queue. Note that this info is eventually
// dumped into the user's GCS bucket.
message LogEntry {
  string project_id = 1;
  string job_config_id = 2;
  string job_run_id = 3;
  string task_id = 4;
  google.protobuf.Timestamp create_time = 5;
  Status current_status = 6;
  Status previous_status = 7;
  FailureType failure_type = 10;
  string failure_message = 8;
  Log log = 9;
}
